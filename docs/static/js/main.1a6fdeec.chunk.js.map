{"version":3,"sources":["component/AddCategory.js","helpers/getGifs.js","component/GitGridItem.js","component/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setcategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GitGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categorias","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACI,mCACI,sBAAMC,SAZM,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAO,IACxBR,GAAe,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,MAOd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAAU,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,QACxCG,YAAY,sB,+BCtBnBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLwB,SAACA,GAEzB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAd,GACnBY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGlB,CAACpB,IAEGqB,EDX2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,sBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEfxBe,EAAe,WAIxB,MAAoCzC,mBAAS,CAAC,oBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWlB,KAAI,SAACT,GAAD,OACX,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCdlB4B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.1a6fdeec.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setcategorias}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n    const handleSumit = (e) =>{\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length>2){\r\n            setcategorias( c => [inputValue, ...c]);\r\n            setinputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSumit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={(e) => setinputValue(e.target.value)}\r\n                    placeholder=\"Escribe algo\"\r\n                ></input>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes ={\r\n    setcategorias: PropTypes.func.isRequired\r\n}","\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=QhMbUe3TnKoDQudpIbOI3Yny6KGr7KZI`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n \r\n\r\n\r\nexport const GitGridItem = ({id, title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GitGridItem } from \"./GitGridItem\";\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    //const [images, setImages] = useState([]);\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GitGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n\r\n    );\r\n\r\n};\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(img => {\r\n            setstate({\r\n                data: img,\r\n                loading: false\r\n            })\r\n        })\r\n    }, [category]);\r\n\r\n    return state;\r\n\r\n}","\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './component/AddCategory'\r\nimport { GifGrid } from './component/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    //const categorias = ['Capitan America', 'Iroman', 'Superman'];\r\n\r\n    const [categorias, setcategorias] = useState(['Capitan America'])\r\n\r\n    //const handleAdd = () =>{\r\n    //    //setcategorias([...categorias,'Goku']);\r\n    //    setcategorias( c => [...c, 'Goku']);\r\n    //}\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategorias={setcategorias} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map((category) =>\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}